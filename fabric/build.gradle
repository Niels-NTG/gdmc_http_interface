plugins {
	id 'fabric-loom' version '1.6.9'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

loom {
	// "runs" isn't required, but when we do need it then it can be useful
	runs {
		client {
			client()
			setConfigName("Fabric Client")
			ideConfigGenerated(true)
			runDir("../run")
		}
		server {
			server()
			setConfigName("Fabric Server")
			ideConfigGenerated(true)
			runDir("../run")
		}
	}
}

remapJar {
	inputFile = shadowJar.archiveFile
	dependsOn shadowJar
}

configurations {
	// The addModJar basically embeds the mod to the built jar
	addModJar
	include.extendsFrom addModJar
	modImplementation.extendsFrom addModJar
}

dependencies {
	minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
	mappings loom.layered() {
		// Mojang mappings
		officialMojangMappings()
	}
	// Fabric loader
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

	addModJar(fabricApi.module("fabric-lifecycle-events-v1", rootProject.fabric_version))
	addModJar(fabricApi.module("fabric-networking-api-v1", rootProject.fabric_version))
}


task deleteResources(type: Delete) {
	delete file('build/resources/main')
}

processResources {
	dependsOn(copyCommonResources)
}

runClient {
	dependsOn(copyCommonResources)
	finalizedBy(deleteResources)
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn(commonSources)
	from commonSources.archiveFile.map { zipTree(it) }
}
